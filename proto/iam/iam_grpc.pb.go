// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: iam/iam.proto

package iam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityAccessManagementClient is the client API for IdentityAccessManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityAccessManagementClient interface {
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersResponse, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceReply, error)
}

type identityAccessManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityAccessManagementClient(cc grpc.ClientConnInterface) IdentityAccessManagementClient {
	return &identityAccessManagementClient{cc}
}

func (c *identityAccessManagementClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/iam.IdentityAccessManagement/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityAccessManagementClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceReply, error) {
	out := new(EnforceReply)
	err := c.cc.Invoke(ctx, "/iam.IdentityAccessManagement/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityAccessManagementServer is the server API for IdentityAccessManagement service.
// All implementations must embed UnimplementedIdentityAccessManagementServer
// for forward compatibility
type IdentityAccessManagementServer interface {
	ListUsers(context.Context, *emptypb.Empty) (*ListUsersResponse, error)
	Enforce(context.Context, *EnforceRequest) (*EnforceReply, error)
	mustEmbedUnimplementedIdentityAccessManagementServer()
}

// UnimplementedIdentityAccessManagementServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityAccessManagementServer struct {
}

func (UnimplementedIdentityAccessManagementServer) ListUsers(context.Context, *emptypb.Empty) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedIdentityAccessManagementServer) Enforce(context.Context, *EnforceRequest) (*EnforceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedIdentityAccessManagementServer) mustEmbedUnimplementedIdentityAccessManagementServer() {
}

// UnsafeIdentityAccessManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityAccessManagementServer will
// result in compilation errors.
type UnsafeIdentityAccessManagementServer interface {
	mustEmbedUnimplementedIdentityAccessManagementServer()
}

func RegisterIdentityAccessManagementServer(s grpc.ServiceRegistrar, srv IdentityAccessManagementServer) {
	s.RegisterService(&IdentityAccessManagement_ServiceDesc, srv)
}

func _IdentityAccessManagement_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAccessManagementServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.IdentityAccessManagement/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAccessManagementServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityAccessManagement_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAccessManagementServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.IdentityAccessManagement/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAccessManagementServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityAccessManagement_ServiceDesc is the grpc.ServiceDesc for IdentityAccessManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityAccessManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam.IdentityAccessManagement",
	HandlerType: (*IdentityAccessManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _IdentityAccessManagement_ListUsers_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _IdentityAccessManagement_Enforce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/iam.proto",
}
